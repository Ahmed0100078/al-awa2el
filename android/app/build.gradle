def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'




def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}
android {
    compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.elnooronline.alawael"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
    

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            //added new to debug
//            signingConfig signingConfigs.debug
//            shrinkResources false
//            minifyEnabled false
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            shrinkResources false
//            minifyEnabled false
//            applicationVariants.all { variant ->
//                variant.outputs.all { output ->
//                    output.outputFileName = "app-release.apk"
//                }
//            }
        }
    }
}


flutter {
    source '../..'
}

dependencies {
    def multidex_version = "2.0.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform("com.google.firebase:firebase-bom:27.0.0")
    implementation "com.google.firebase:firebase-analytics"
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
    implementation "androidx.multidex:multidex:$multidex_version"
    implementation ('com.google.android.exoplayer:exoplayer:2.14.1')
    implementation 'com.android.support:multidex:1.0.3'
    // implementation project(path: ':mobilertc', configuration: 'default')
// implementation project(path: ':commonlib', configuration: 'default')
//implementation fileTree(dir: "libs", include: ["*.aar"])


}
